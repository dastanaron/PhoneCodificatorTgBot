import { TelegrafContext } from 'telegraf/typings/context';
import { DataBaseConnection } from '../../Contracts/DataBaseConnection';
import BotDatabaseComponent from '../../Components/BotDatabase/BotDatabaseComponent';

export function start(context: TelegrafContext, botDatabase: DataBaseConnection): void {
    let answerMessage = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ';

    if (context.from && context.from.username) {
        answerMessage += `${context.from.username}!`;

        const botDBComponent = new BotDatabaseComponent(botDatabase);

        const user = botDBComponent.createUserModel();

        user.tgUserId = context.from.id;
        user.firstName = context.from.first_name;
        user.lastName = String(context.from.last_name);
        user.username = context.from.username;
        user.isBot = context.from.is_bot;
        user.languageCode = context.from.language_code || 'en';

        botDBComponent.user.saveModel(user);
    }

    answerMessage += `\n–Ø –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`;

    context.reply(answerMessage, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üë®üë©üèª‚Äçü¶∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                        callback_data: 'usersInfo',
                    },
                    {
                        text: 'üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
                        callback_data: 'dbInfo',
                    },
                ],
            ],
        },
    });
}
